from os.path import join
import glob

CODE = 'plotting_code/'
SOURCES = 'sources/'
FIGURES = 'figures_complete/'
DATA = 'datasets/'

def get_source_files():
    return glob.glob(join(SOURCES,'**/*.*'), recursive=True)

def get_source_filenames():
    return [p[len(SOURCES):] for p in get_source_files()]


ruleorder:
    copy_sources > visualize_scidata > plot_neo_ios > run_demo_workflow > escape_underscores

rule all_figures:
    params: FIGURES
    input: expand(FIGURES + '{f}', f=['neo_architecture03.svg', 'neo_architecture07.svg', 'neo_architecture_future.svg', 'neo_ios_and_tools.pdf', 'i140703-001.svg', 'i140703-001_annotations.txt', 'discussion_global_picture_escus.svg', join('workflows','data.png'), join('workflows','data.svg'), join('workflows','python_demo.svg'), join('workflows', 'python_demo_escus.svg'), join('workflows', 'rulegraph_colored_escus.svg')] + get_source_filenames())
    output: join(FIGURES, 'figures_complete.done')
    shell: 'touch {output}'

rule get_neo_03_architecture:
    output: FIGURES + 'neo_architecture03.svg'
    shell: 'wget --output-document {output}  https://neo.readthedocs.io/en/0.3.3/_downloads/simple_generated_diagram.svg'

rule get_neo_07_architecture:
    input: CODE + 'plot_neo_architecture07.py'
    output: FIGURES + 'neo_architecture07.svg'
    conda: CODE + 'envs/neo07.yml'
    shell: 'python {input} {output}'

rule get_neo_future_architecture:
    input: CODE + 'plot_neo_architecture_future.py'
    output: FIGURES + 'neo_architecture_future.svg'
    conda: CODE + 'envs/neo07.yml'
    shell: 'python {input} {output}'

rule copy_sources:
    input: get_source_files()
    params: output_folder = FIGURES,
            input_folder = join(SOURCES,'*')
    output: expand(FIGURES + '{f}', f=get_source_filenames())
    shell: 'cp -r {params.input_folder} {params.output_folder}'

rule export_neo_io_list:
    input: CODE + 'extract_neo_ios.py'
    output: temp('neo_ios.txt')
    conda: CODE + 'envs/neo07.yml'
    shell: 'python {input} {output}'

rule plot_neo_ios:
    input: script = FIGURES + 'neo_ios_and_tools.tex',
    params: scriptname = 'neo_ios_and_tools.tex'
    output: FIGURES + 'neo_ios_and_tools.pdf'
    shell: '''
           cd {FIGURES}
           pdflatex {params.scriptname} --shell-escape
           '''

rule download_scidata:
    output:
        nev = join(DATA,'i140703-001.nev'),
        ns2 = join(DATA,'i140703-001.ns2'),
        odml = join(DATA,'i140703-001.odml'),
    params:
        server = 'https://web.gin.g-node.org/INT/multielectrode_grasp/raw/24cd5caee3ae79066ca37844cab931d04dcad977/datasets/'
    shell:
        '''
        wget -O {output.nev} {params.server}i140703-001-03.nev
        wget -O {output.ns2} {params.server}i140703-001.ns2
        wget -O {output.odml} {params.server}i140703-001.odml
        '''

rule visualize_scidata:
    input:
        expand(join(DATA,'i140703-001.{ext}'), ext=['ns2','nev']),
        script = join(FIGURES, 'code_visualize_data.py')
    params: working_dir = FIGURES,
            script = 'code_visualize_data.py'
    output:
        join(FIGURES,'i140703-001.svg')
    conda:
        CODE + 'envs/neo08.yml' # TODO Neo version should be unified across scripts
    shell:
        '''
        cd {params.working_dir}
        python {params.script} ../datasets/i140703-001 1
        '''

rule annotate_scidata:
    input:
        expand(join(DATA,'i140703-001.{ext}'), ext=['ns2','nev','odml']),
        script = join(FIGURES, 'code_annotate_data.py')
    output:
        join(FIGURES,'i140703-001_annotations.txt')
    conda:
        CODE + 'envs/demo_env.yml' # TODO Neo version should be unified across scripts
    shell:
        '''
        python {input.script} datasets/i140703-001 datasets/i140703-001.odml >> {output}
        '''
        
rule run_demo_workflow:
    input: expand(join(FIGURES, 'workflows', '{f}'), f=['python_demo.snakefile', 'generate_data.py', 'plot_data.py', 'config.yaml', join('envs','data_generation_environment.yaml'), join('envs','plotting_environment.yaml')])
    output: expand(join(FIGURES, 'workflows', '{f}'), f=['data.png', 'data.svg', 'python_demo.svg'])
    params: working_dir = join(FIGURES, 'workflows')
    shell:
        '''
        cd {params.working_dir}
        snakemake -s python_demo.snakefile --dag | dot -T svg > python_demo.svg
        snakemake -s python_demo.snakefile --use-conda
        '''
        
rule escape_underscores:
    input: join(FIGURES, '{filename}.{ext}')
    output: join(FIGURES, '{filename}_escus.{ext}')
    shell:
        """
        cat {input} | sed '2,$s/[_]/\\\_/g' | sed '2,$s/[&]/\\\&/g' > {output}
        """

